(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{182:function(t,e,s){"use strict";s.r(e);var a=s(0),n=Object(a.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("p",[t._v("用 Java 编程比较便捷的原因之一就是它提供了丰富的类库和具备庞大的开发生态，需要实现的任何一个功能，你都可以找到合适的“工具包”，即便是这样，你也不能盲目的使用它们，不然可能会陷入性能陷阱，而今天说的 Collection 类，就是一个这样的例子。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),s("p",[t._v("如果要在多线程环境下使用 Collections，你可以利用 Synchronized Wrappers，它的形式如下：")]),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),s("p",[t._v("这种 collection 存储在不可变 (immutable) 的 collection 中，任何对该 collection 的修改都会产生一个新的 collection，你可能已经猜到了，这种 collections 只适用于读远远多于写的场景。")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),s("p",[t._v("我们在很多场合都有听过 CAS 的概念，例如 Memcache 和 Mysql 中都实现了 CAS 机制：当我们要去更新一个值，先获取它的副本，然后在此副本的基础上计算出结果，最后拿结果和副本去修改原值，此时如果发现副本和原值发生了不一致，说明有其他线程抢先一步更新了原值，则更新失败，否则更新成功。")]),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),s("p",[t._v("参考：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.codejava.net/java-core/collections/understanding-collections-and-thread-safety-in-java",target:"_blank",rel:"noopener noreferrer"}},[t._v("Understanding Collections and Thread Safety in Java"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.baeldung.com/java-concurrent-locks",target:"_blank",rel:"noopener noreferrer"}},[t._v("Guide to java.util.concurrent.Locks"),s("OutboundLink")],1)])])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"理解-java-中的-colleciton-和线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#理解-java-中的-colleciton-和线程安全","aria-hidden":"true"}},[this._v("#")]),this._v(" 理解 Java 中的 Colleciton 和线程安全")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1-线程安全的陷阱"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-线程安全的陷阱","aria-hidden":"true"}},[this._v("#")]),this._v(" 1. 线程安全的陷阱")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("Java 中的 Collection 类中，分为线程安全的和非线程安全的，其中 "),s("code",[t._v("Vector")]),t._v(" 和 "),s("code",[t._v("Hashtable")]),t._v(" 属于前者，而其他的例如 "),s("code",[t._v("List")]),t._v("、"),s("code",[t._v("Set")]),t._v("、"),s("code",[t._v("Map")]),t._v(" 等并不提供线程安全性，初学 Java 的同学看到这里，可能会想：这很简单嘛，在多线程环境下用 "),s("code",[t._v("Vector")]),t._v(" 呗，而如果是单线程程序的话，用 "),s("code",[t._v("List")]),t._v(" 就好。这种想法实际上是有问题的，虽然这样使用 Collection，在写程序的时候简单了，但如果应用对性能要求很高的话，这种选择往往是错误的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("可以看到大多数 Collection 类都没有实现线程安全，究其原因是线程安全的特性的代价非常高，而 "),e("code",[this._v("Vector")]),this._v(" 和 "),e("code",[this._v("Hashtable")]),this._v(" 存在的原因并不是为了解决并发性问题的，实际上它们只是较早期 Java 版本中的特性而已，所以我们在使用 Collection 时，应该避免使用这两个类。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2-fail-fast-迭代器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-fail-fast-迭代器","aria-hidden":"true"}},[this._v("#")]),this._v(" 2. Fail-Fast 迭代器")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("迭代器 iterator 一般用来对 Collection 进行遍历、修改 Collection 元素等，而当多个线程共享同一个 Collection 对象时，如果其中一个线程通过迭代器遍历 Collection，于此同时有另一个线程正在修改它，这时 Java 便会抛出 "),e("code",[this._v("ConcurrentModificationException")]),this._v(" 异常，这也是 Fail-Fast 名字的出处。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Java 做这样的处理是因为多个线程同时读写迭代器是非常危险的行为，会导致程序的不确定性和一致性的问题，一旦发现此类行为，越早“制止”越好，这种机制可以很好的帮助诊断 bug，所以你的程序遇到 "),e("code",[this._v("ConcurrentModificationException")]),this._v(" 这种异常应该直接终止，而不是去捕获它。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3-synchronized-wrappers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-synchronized-wrappers","aria-hidden":"true"}},[this._v("#")]),this._v(" 3. Synchronized Wrappers")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("Collections"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("synchronizedXXX")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("collection"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("XXX")]),t._v("可以为 "),s("code",[t._v("List")]),t._v("、"),s("code",[t._v("Map")]),t._v("、"),s("code",[t._v("Set")]),t._v("、"),s("code",[t._v("SortedMap")]),t._v(" 及 "),s("code",[t._v("SortedSet")]),t._v("，例如对于 "),s("code",[t._v("List")]),t._v(" ：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("List"),s("span",{pre:!0,attrs:{class:"token generics function"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" safeList "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Collections"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("synchronizedList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这样，你的 Collection 就是线程安全的，即便如此，这些线程安全的 Collection 的 iterator 仍然不是线程安全的，要使 iterator 也处于线程安全状态，你需要使用 "),e("code",[this._v("synchronized")]),this._v(" 代码块：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("safeList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tIterator"),s("span",{pre:!0,attrs:{class:"token generics function"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" iterator "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" safeList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        String next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" itorator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ..")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("可以看到，这种 "),e("code",[this._v("synchronized")]),this._v(" block 的开销很大，因为同一时刻，只能有一个线程能运行 block 中的代码，而其他线程都只能在 block 外等待。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_4-并行的-collections"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-并行的-collections","aria-hidden":"true"}},[this._v("#")]),this._v(" 4. 并行的 Collections")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Java 5 引入了并行的 Collections，它们被包含在 "),e("code",[this._v("java.util.concurrent")]),this._v(" 中，且有以下 3 种并发机制：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_4-1-copy-on-write-collections"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-copy-on-write-collections","aria-hidden":"true"}},[this._v("#")]),this._v(" 4.1 copy-on-write collections")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("可以预料的是，它们的 iterator 也是只读的，具备 copy-on-write 的 collections 有 "),e("code",[this._v("CopyOnWriteArrayList")]),this._v(" 和 "),e("code",[this._v("CopyOnWriteArraySet")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_4-2-compare-and-swap（cas）collections"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-compare-and-swap（cas）collections","aria-hidden":"true"}},[this._v("#")]),this._v(" 4.2 Compare-And-Swap（CAS）collections")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("具备 CAS 机制的 Collections 包括 "),e("code",[this._v("ConcurrentLinkedQueue")]),this._v(" 和 "),e("code",[this._v("ConcurrentSkipListMap")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_4-3-java-util-concurrent-lock-lock"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-java-util-concurrent-lock-lock","aria-hidden":"true"}},[this._v("#")]),this._v(" 4.3 java.util.concurrent.lock.Lock")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Lock 库提供丰富的锁机制，包括可重入锁 "),e("code",[this._v("ReentrantLock")]),this._v("，可重入的读写锁 "),e("code",[this._v("ReentrantReadWriteLock")]),this._v("，以及条件变量 "),e("code",[this._v("Condition")]),this._v("，除此之外，和 Synchronized Wrappers 的区别是，该库还提供更细粒度的 Collections 锁，即将一个 Collection 分为多个部分，每部分对应一个锁，可以显著的提高并发能力。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("例如 "),e("code",[this._v("LinkedBlockingQueue")]),this._v(" 提供了队首和队尾两把锁，这样你可以并行的入队和出队。其他的并发 Collections 还包括 "),e("code",[this._v("ConcurrentHashMap")]),this._v(" 和 "),e("code",[this._v("BlockingQueue")]),this._v(" 的所有实现。")])}],!1,null,null,null);n.options.__file="understanding_collections_threadsafe.md";e.default=n.exports}}]);