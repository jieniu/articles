(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{178:function(s,a,e){"use strict";e.r(a);var n=e(0),l=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"避免在构造函数或析构函数中调用虚函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#避免在构造函数或析构函数中调用虚函数","aria-hidden":"true"}},[s._v("#")]),s._v(" 避免在构造函数或析构函数中调用虚函数")]),s._v(" "),e("p",[s._v("我们先来看下下面程序")]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('#include <iostream>\nusing namespace std;\n                                            \nclass Dog {\npublic:\n    Dog () { cout << "I\'m a dog" << endl; }\n    virtual ~Dog () { cout << "destroy a dog" << endl; }\n\n\tvoid bark() { cout << "dog bark" << endl; }\n    void seeDog() { bark(); }\n};\n\nclass YellowDog : public Dog {\npublic:\n    YellowDog() { cout << "I\'m a yellow dog" << endl; }\n    virtual ~YellowDog() { cout << "destroy a yellow dog" << endl;}\n\n    void bark() { cout << "yellow dog bark" << endl; }\n};\n\n\nint main() {\n    YellowDog yd = YellowDog();\n    yd.seeDog();\n\n    return 0;\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br")])]),e("p",[s._v("运行上述程序后，得到以下输出：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("I'm a dog\nI'm a yellow dog\ndog bark\ndestroy a yellow dog\ndestroy a dog\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("可以看到在创建 "),e("code",[s._v("YellowDog")]),s._v(" 对象时，首先会调用基类的构造函数，而且虽然是 "),e("code",[s._v("YellowDog")]),s._v(" 调用的 "),e("code",[s._v("seeDog")]),s._v("，但执行的却是 "),e("code",[s._v("Dog::bark")]),s._v("，此时，如果你想要调用 "),e("code",[s._v("YellowDog::bark")]),s._v("，你需要把基类 "),e("code",[s._v("Dog")]),s._v(" 中的 "),e("code",[s._v("bark")]),s._v(" 声明为 "),e("code",[s._v("virtual")]),s._v(" 类型，如下：")]),s._v(" "),e("div",{staticClass:"language-C++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\tvirtual void bark() { cout << "dog bark" << endl; }\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("同时，为了更好的可读性，建议你也将子类中的继承自基类的虚函数也显示的声明为 "),e("code",[s._v("virtual")]),s._v("，此时你再运行上面的程序后，就可以看到 "),e("code",[s._v("YellowDog::bark")]),s._v(" 被调用了，这就是 C++ 中的多态或动态绑定。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("I'm a dog\nI'm a yellow dog\nyellow dog bark\ndestroy a yellow dog\ndestroy a dog\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("下面，我们做点小改动，故意让 C++ 中的动态绑定失效，我们把 "),e("code",[s._v("seeDog()")]),s._v(" 中的 "),e("code",[s._v("bark()")]),s._v(" 挪到 "),e("code",[s._v("Dog")]),s._v(" 的构造函数中，看下会出现什么情况")]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\t// ...\n    Dog () { cout << "I\'m a dog" << endl; bark(); }\n\t// ...\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("此时输出变成了")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("I'm a dog\ndog bark\nI'm a yellow dog\ndestroy a yellow dog\ndestroy a dog\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("可以看到虽然声明了虚函数，但却没有进行动态绑定，原因在于"),e("strong",[s._v("在调用 "),e("code",[s._v("Dog")]),s._v(" 的构造函数时，"),e("code",[s._v("YellowDog")]),s._v(" 对象还没有被构造完成，对一个不存在的对象调用其成员函数是非常危险的")]),s._v("，所以编译器在这里选择了调用 "),e("code",[s._v("Dog::bark")]),s._v("，而不是 "),e("code",[s._v("YellowDog::bark")]),s._v("，同时要注意的是，"),e("strong",[s._v("在构造函数中尽可能的只做最简单的初始化操作，避免复杂的函数调用。")])]),s._v(" "),e("p",[s._v("现在我们把 "),e("code",[s._v("bark()")]),s._v(" 放在 "),e("code",[s._v("Dog")]),s._v(" 中的析构函数中，看下会发生什么情况")]),s._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('    // ...\n\tDog () { cout << "I\'m a dog" << endl;  }\n    virtual ~Dog () { cout << "destroy a dog" << endl; bark();}\n\t// ...\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("输出如下")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("I"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'m a dog\nI'")]),s._v("m a yellow dog\ndestroy a yellow dog\ndestroy a dog\ndog bark\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("再一次，多态的特性没有生效，原因在于在析构 "),e("code",[s._v("YellowDog")]),s._v(" 的对象时，先调用 "),e("code",[s._v("YellowDog")]),s._v(" 的析构函数，即在调用 "),e("code",[s._v("bark")]),s._v(" 时，"),e("code",[s._v("YellowDog")]),s._v(" 部分的数据已经被清理，此时再调用该对象的虚函数也是非常危险的，所以为了安全起见，编译器又一次选择了调用基类的 "),e("code",[s._v("bark")]),s._v("。")]),s._v(" "),e("p",[s._v("以上，我们学到了一条宝贵的经验：")]),s._v(" "),e("blockquote",[e("p",[s._v("不要在构造函数或析构函数中调用虚函数")])]),s._v(" "),e("p",[s._v("参考：https://www.youtube.com/watch?v=mTE5jaXaOuE&t=0s&index=9&list=PLE28375D4AC946CC3")])])}],!1,null,null,null);l.options.__file="virtual_function_and_constructor.md";a.default=l.exports}}]);