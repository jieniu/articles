(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{174:function(n,s,t){"use strict";t.r(s);var e=t(0),a=Object(e.a)({},function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("div",{staticClass:"content"},[n._m(0),n._v(" "),t("p",[n._v("C++ 对待异常处理有两个规则")]),n._v(" "),n._m(1),n._v(" "),t("p",[n._v("为便于理解，我们先来看一个例子")]),n._v(" "),n._m(2),n._m(3),n._v(" "),n._m(4),n._v(" "),n._m(5),n._m(6),n._v(" "),t("p",[n._v("找到上述程序崩溃的元凶后，我们便学到了一条宝贵的 C++ 经验：")]),n._v(" "),n._m(7),n._v(" "),n._m(8),n._v(" "),t("p",[n._v("为了不在析构函数中抛出异常，一般有两种做法：")]),n._v(" "),n._m(9),n._v(" "),t("p",[n._v("参考")]),n._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.youtube.com/watch?v=LQMYwvM8RF8&t=14s",target:"_blank",rel:"noopener noreferrer"}},[n._v("Advanced C++: Exceptions in Destructors"),t("OutboundLink")],1)])])])},[function(){var n=this.$createElement,s=this._self._c||n;return s("h1",{attrs:{id:"异常处理和析构函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常处理和析构函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 异常处理和析构函数")])},function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ol",[t("li",[n._v("如果在 "),t("code",[n._v("try...catch")]),n._v(" 中有异常抛出，则在 "),t("code",[n._v("catch")]),n._v("  执行前，会先将 "),t("code",[n._v("try")]),n._v(" 语句块对应的栈清空")]),n._v(" "),t("li",[n._v("C++ 不允许在同一个 "),t("code",[n._v("try...catch")]),n._v(" 中处理1个以上的异常，如果发生此种情况，程序就会崩溃")])])},function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('class Dog {\npublic:\n\tstring name;\n\tDog(string name) {this->name = name; cout << name << " is born.\\n"; }\n    ~Dog() { cout << name << " is destroied.\\n"; }\n    \n    void bark() { cout << name << " is barking.\\n"; }\n};\n\nint main() {\n    try {\n        Dog dog1("Henry");\n        Dog dog2("Bob");\n        throw 20;\n        dog1.bark();\n        dog2.bark();\n    } catch (int e) {\n        cout << e << " is caught" << endl;\n    }\n}\n\n/*\n * output：\n * Henry is born.\n * Bob is born.\n * Bog is destroied.\n * Henry is destroied.\n * 20 is caught\n */\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br")])])},function(){var n=this.$createElement,s=this._self._c||n;return s("p",[this._v("从上面的例子可以看出，"),s("code",[this._v("catch")]),this._v(" 语句块在两个局部对象析构完成后才执行，意味着在异常被捕获之前，"),s("code",[this._v("try")]),this._v(" 代码块中的栈需要被清理。")])},function(){var n=this.$createElement,s=this._self._c||n;return s("p",[this._v("我们把上面代码稍作修改，把 "),s("code",[this._v("throw")]),this._v(" 语句放到析构函数中，看下会发生什么")])},function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('class Dog {\n    public:\n        string name;\n        Dog(string name) {this->name = name; cout << name << " is born.\\n"; }\n        ~Dog() { cout << name << " is destroied.\\n"; throw 20;}\n\n        void bark() { cout << name << " is barking.\\n"; }\n};\n\nint main() {\n    try {\n        Dog dog1("Henry");\n        Dog dog2("Bob");\n        dog1.bark();\n        dog2.bark();\n    } catch (int e) {\n        cout << e << " is caught" << endl;\n    }\n}\n\n/* Output: \n * Henry is born.\n * Bob is born.\n * Henry is barking.\n * Bob is barking.\n * Bob is destroied.\n * Henry is destroied.\n * libc++abi.dylib: terminating with uncaught exception of type int\n * [1]    51549 abort      ./exception\n */\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br")])])},function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("p",[n._v("可以看到程序崩溃了，崩溃原因是 "),t("code",[n._v("terminating with uncaught exception of type int")]),n._v(" ：异常没有被处理。我们来分析下其中的原因，在 "),t("code",[n._v("try")]),n._v(" 中，我们定义了两个对象，并按照顺序调用了它们的 "),t("code",[n._v("bark")]),n._v(" 接口，随后离开 "),t("code",[n._v("try")]),n._v(" 代码块，此时，编译器会自动释放这两个局部对象，调用它们的析构函数，因为栈的特性是后进先出，所以先析构 "),t("code",[n._v("Bob")]),n._v("，在执行 "),t("code",[n._v("Bob")]),n._v(" 的析构函数时，抛出了异常，但此时并不会立即执行 "),t("code",[n._v("catch")]),n._v(" 语句块，根据上文提到的第一条规则：「在 "),t("code",[n._v("catch")]),n._v(" 执行前，需要先清理 "),t("code",[n._v("try")]),n._v(" 中的堆栈」。于是 "),t("code",[n._v("Henry")]),n._v(" 也被析构了，这让 "),t("code",[n._v("try")]),n._v(" 语句块中抛出了 2 个异常，直接导致了程序的崩溃。")])},function(){var n=this.$createElement,s=this._self._c||n;return s("blockquote",[s("p",[this._v("不要在析构函数中抛出异常。")])])},function(){var n=this.$createElement,s=this._self._c||n;return s("p",[this._v("因为如果你的析构函数中有异常抛出的话，你便无法控制 "),s("code",[this._v("try")]),this._v(" 语句中抛出来的异常数量——这将是一场灾难。")])},function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ol",[t("li",[t("p",[n._v("在析构函数内部捕获异常，防止异常被抛出，例如下面的代码")]),n._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("~Dog {\n    try {\n        // may throw exception\n    } catch (MyException e) {\n        // Catch exception\n    } catch (...) {\n        // 尽量不要使用 ... 来捕获异常\n    }\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br")])]),t("p",[n._v("虽然这样做，你的析构函数再不会抛出异常了，但却带来了一些隐患，即你使用了 "),t("code",[n._v("(...)")]),n._v(" 来捕获异常，这种代码没有任何用处（它无法输出有效的异常信息），同时由于它会捕获一切异常，于是会将一些必要的程序缺陷掩盖起来，而不是“尽早的暴露问题”。所以在这里，我们学到的第二条经验是：")]),n._v(" "),t("blockquote",[t("p",[n._v("不要使用 "),t("code",[n._v("(...)")]),n._v(" 来捕获异常")])])]),n._v(" "),t("li",[t("p",[t("strong",[n._v("保持析构函数简洁，将可能导致异常的代码移到其他的函数中")]),n._v("。这也是推荐的做法。")])])])}],!1,null,null,null);a.options.__file="exception_and_destructor.md";s.default=a.exports}}]);