(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{171:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("p",[t._v("RAII（Resource Aquisition is Initialization）技术是用对象来管理资源的一种技术，资源可以指内存、socket、IPC 等。")]),t._v(" "),t._m(1),t._v(" "),a("p",[t._v("这个概念比较抽象，我们还是从具体的例子中学习，一般我们这样使用互斥锁：")]),t._v(" "),t._m(2),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),a("p",[t._v("所以")]),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),a("p",[t._v("此时 "),a("code",[t._v("m_pm")]),t._v(" 会被多个 RAII 对象持有，且因为每个 RAII 对象析构时都会对 "),a("code",[t._v("m_pm")]),t._v(" 进行解锁，所以程序就无法控制该锁的解锁时机了，因此，为了解决这问题，我们首先想到的方案就是禁止 "),a("code",[t._v("Lock")]),t._v(" 对象的复制能力，具体做法可以参考之前的文章"),a("a",{attrs:{href:"https://www.jianshu.com/p/1efc919875ec",target:"_blank",rel:"noopener noreferrer"}},[t._v("《没有学不会的 C++：禁止成员函数（disallow functions）》"),a("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._m(22),t._v(" "),t._m(23),t._m(24),t._v(" "),a("p",[t._v("参考：")]),t._v(" "),t._m(25)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"raii-技术（resource-aquisition-is-initialization）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raii-技术（resource-aquisition-is-initialization）","aria-hidden":"true"}},[this._v("#")]),this._v(" RAII 技术（Resource Aquisition is Initialization）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"用-raii-管理锁资源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-raii-管理锁资源","aria-hidden":"true"}},[this._v("#")]),this._v(" 用 RAII 管理锁资源")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("pthread_mutex_t mu "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PTHREAD_MUTEX_INITIALIZER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("functionA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_mutex_lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... 操作共享资源")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_mutex_unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("即，我们在使用共享资源之前通过 "),s("code",[this._v("pthread_mutex_lock")]),this._v(" 加锁，并在使用完资源后，通过 "),s("code",[this._v("pthread_mutex_unlock")]),this._v(" 解锁，但这种代码隐患极大，因为你不能保证锁一定会释放，例如在使用资源的时候可能抛出异常，那么这个锁就永远得不到释放，那有什么办法可以让锁一定释放，甚至自动释放呢？那就要用到今天提到的 RAII 技术：我们用对象来管理锁，对象存储在栈中，利用代码块在退出时会自动释放栈资源的特性，锁也会自动得到释放，如下面的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("#include "),a("span",{pre:!0,attrs:{class:"token generics function"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("pthread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\npthread_mutex_t mu "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PTHREAD_MUTEX_INITIALIZER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Lock")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    pthread_mutex_t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" m_pm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    explicit "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pthread_mutex_t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_mutex_lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" m_pm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_mutex_unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m_pm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("functionA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Lock "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mylock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... 操作共享资源")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mutex会在函数退出时自动释放")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面代码中，"),s("code",[this._v("Lock")]),this._v(" 构造函数接受一个 mutex 指针，同时会调用 "),s("code",[this._v("pthread_mutex_lock")]),this._v(" 加锁，并会在该对象被析构时，调用 "),s("code",[this._v("pthread_mutex_unlock")]),this._v(" 解锁，这就做到了对象创建时加锁，释放时解锁的效果，如果我们把这个对象放到栈中，则锁资源也会随着该对象在栈中的生命周期进行自动的加锁和解锁，函数或者代码块都可以构造这样的上下文。而这种用对象来管理资源的方式，就是我们开篇所说的 RAII。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"shared-ptr-也是一种-raii"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shared-ptr-也是一种-raii","aria-hidden":"true"}},[this._v("#")]),this._v(" shared_ptr 也是一种 RAII")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("另一个典型的使用 RAII 技术的例子是 "),a("code",[t._v("std::shared_ptr")]),t._v("，我们通过 "),a("code",[t._v("shared_ptr")]),t._v(" 来管理资源——一般是堆中申请的对象，"),a("code",[t._v("shared_ptr")]),t._v(" 通过引用计数来管理指针对象，我们对 "),a("code",[t._v("shared_ptr")]),t._v(" 进行复制，引用计数就加 1，相反，如果减少一个 "),a("code",[t._v("shared_ptr")]),t._v("，引用计数就减 1，当引用计数减到 0 时，会自动调用 "),a("code",[t._v("delete")]),t._v(" 释放指针对象，下面的代码使用了一个 "),a("code",[t._v("pd")]),t._v(" 智能指针来管理 "),a("code",[t._v("dog")]),t._v(" 对象，当 "),a("code",[t._v("pd")]),t._v(" 退出作用域，如果没有额外的智能指针引用 "),a("code",[t._v("dog")]),t._v("，则 "),a("code",[t._v("dog")]),t._v(" 会被自动释放：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("function_A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pd 退出作用域时，dog 会自动释放")]),t._v("\n\tstd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("shared_ptr"),a("span",{pre:!0,attrs:{class:"token generics function"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("下面我们来看一下使用 "),s("code",[this._v("shared_ptr")]),this._v(" 的一个陷阱，代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class dog;\nclass Trick;\nvoid train(std::shared_ptr<dog> pd, Trick dogtrick);\nTrick getTrick();\n\nint main() {\n\ttrain(std::shared_ptr<dog> pd(new dog()), getTrick());\n}\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("函数 "),a("code",[t._v("train")]),t._v(" 是一个训练函数，它接受两个参数："),a("code",[t._v("dog")]),t._v(" 和 "),a("code",[t._v("Trick")]),t._v("，即具体训练 "),a("code",[t._v("dog")]),t._v(" 的方法由 "),a("code",[t._v("Trick")]),t._v(" 提供，但实际上这行代码是有问题的，问题在于，编译器调用 "),a("code",[t._v("new dog()")]),t._v("、"),a("code",[t._v("getTrick()")]),t._v("  和 "),a("code",[t._v("shared_ptr<dog> pd()")]),t._v(" 这三个函数的顺序是不确定的，如果编译器正好按照以下顺序来执行：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[s("code",[this._v("new dog()")])]),this._v(" "),s("li",[s("code",[this._v("getTrick()")])]),this._v(" "),s("li",[s("code",[this._v("shared_ptr<dog> pd()")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("同时在执行到第 2 步  "),s("code",[this._v("getTrick()")]),this._v(" 时抛出了异常，那么 "),s("code",[this._v("dog")]),this._v(" 指针就没有被智能指针管理起来，于是就发生了内存泄漏。这个问题怎么解决，我们把 "),s("code",[this._v("train")]),this._v(" 这行代码拆成两行就可以了，如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("int main() {\n\tstd::shared_ptr<dog> pd(new dog());\n    train(pd, getTrick());\n}\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br"),s("span",{staticClass:"line-number"},[this._v("2")]),s("br"),s("span",{staticClass:"line-number"},[this._v("3")]),s("br"),s("span",{staticClass:"line-number"},[this._v("4")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("在初始化 "),s("code",[this._v("shared_ptr")]),this._v(" 时，不要和其他语句放在一起使用")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"raii-对象的复制问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raii-对象的复制问题","aria-hidden":"true"}},[this._v("#")]),this._v(" RAII 对象的复制问题")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后，我们再来看一个 RAII 对象复制的问题，仍然是上文定义的锁 "),s("code",[this._v("Lock")]),this._v("，如果对 "),s("code",[this._v("Lock")]),this._v(" 对象调用赋值构造函数，即：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("Lock "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("L1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nLock "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("L2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("今天我们来学习另外一种解决方案，即使用智能指针 "),s("code",[this._v("shared_ptr")]),this._v(" 来解决 RAII 锁的复制问题，思路是这样的，因为智能指针只有在引用计数减为 0 时，才执行真正的「清理」工作，如果把「清理」换成解锁，我们就不用担心多次解锁的问题。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("正好，"),s("code",[this._v("shared_ptr")]),this._v(" 支持用户自定义「清理」方法，如下是 "),s("code",[this._v("shared_ptr")]),this._v(" 的声明")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("template<class Other, class D> shared_ptr(Other* ptr, D deleter);\n")])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第二个参数是引用计数为 0 时调用的「清理」函数，默认会使用 "),s("code",[this._v("delete")]),this._v("，所以在锁场景，我们把它替换为 "),s("code",[this._v("pthread_mutex_unlock")]),this._v(" 即可，完整的代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pthread_mutex_t mu = PTHREAD_MUTEX_INITIALIZER;\nclass Lock {\n    private:\n        std::shared_ptr<pthread_mutex_t> pMutex;\n    public:\n        explicit Lock(pthread_mutex_t *pm)\n            : pMutex(pm, pthread_mutex_unlock) {\n                pthread_mutex_lock(pm);\n            }\n};\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到，"),a("code",[t._v("Lock")]),t._v(" 中 "),a("code",[t._v("pMutex")]),t._v(" 是一个 "),a("code",[t._v("pthread_mutex_t")]),t._v(" 类型的智能指针，它在构造函数被调用时初始化，且 "),a("code",[t._v("deleter")]),t._v(" 是 "),a("code",[t._v("pthread_mutex_unlock")]),t._v("，同时会调用 "),a("code",[t._v("pthread_mutex_lock")]),t._v(" 进行加锁，这种机制不限制 "),a("code",[t._v("Lock")]),t._v(" 的复制，且只有在所有「复制品」都释放时，才自动调用 "),a("code",[t._v("pthread_mutex_unlock")]),t._v(" 进行解锁，这是非常理想的使用 RAII 控制锁的方法。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("https://www.youtube.com/watch?v=ojOUIg13g3I&index=11&list=PLE28375D4AC946CC3&t=0s")])])}],!1,null,null,null);n.options.__file="RAII.md";s.default=n.exports}}]);